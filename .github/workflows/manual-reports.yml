# .github/workflows/monthly-report.yml
name: Manual Website Report

on:
  schedule:
    - cron: '0 6 1 * *' # Monthly on the 1st at 6AM UTC
  workflow_dispatch:     # Optional: allow manual runs
    inputs:
      site_name:
        description: 'Client name (used in logs/folder names)'
        required: true
      site_url:
        description: 'URL of the site to audit'
        required: true
      max_pages:
        description: 'Max pages'
        required: true

jobs:

  set-date:
    runs-on: ubuntu-latest
    outputs:
      datestamp: ${{ steps.set.outputs.datestamp }}
    steps:
      - id: set
        run: echo "datestamp=$(date +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"
        
  audit:
    runs-on: ubuntu-latest

    needs: set-date


    env:
      SITE_NAME: ${{ github.event.inputs.site_name }}
      SITE_URL: ${{ github.event.inputs.site_url }}
      MAX_PAGES: ${{ github.event.inputs.max_pages }}
      DATESTAMP: ${{ needs.set-date.outputs.datestamp }}
      REPORT_DIR: docs/manual-reports/${{ github.event.inputs.site_name }}/${{ needs.set-date.outputs.datestamp }}

    steps:

      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0  # Fetch full history so we can pull and push safely


      - name: Set dynamic datestamp
        run: echo "DATESTAMP=$(date +'%Y-%m-%d')" >> "$GITHUB_ENV"
      
      - name: Create report folder
        run: |
          mkdir -p $REPORT_DIR

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install a11y tools
        run: |
          npm install
          npm ci
          npx playwright install
      
      - name: Run a11y scan
        run: node crawler.js --report_dir=$REPORT_DIR --max_pages=$MAX_PAGES  --site_name=$SITE_NAME --start_url=$SITE_URL --datestamp=$DATESTAMP

      - name: Generate a11y reports
        run: node summary-reporter.js --report_dir=$REPORT_DIR --site_name=$SITE_NAME --start_url=$SITE_URL --datestamp=$DATESTAMP

      - name: Generate broken link report
        run:  node generate-link-report.js --report_dir=$REPORT_DIR --site_name=$SITE_NAME --datestamp=$DATESTAMP

      - name: Generate HTML Dashboard
        run: |
          node generate-dashboard.js \
            --output_dir $REPORT_DIR \
            --site_name "${{ env.SITE_NAME }}" \
            --datestamp "${{ env.DATESTAMP }}" \
            --page_count ${{ steps.count_pages.outputs.total }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ env.SITE_NAME }}
          path: ${{ env.REPORT_DIR }}

      - name: Set metadata output
        id: set-meta
        run: |
          echo "{\"name\":\"${{ env.SITE_NAME }}\",\"url\":\"${{ env.SITE_URL }}\"}" > site.json
          echo "site_info=$(cat site.json)" >> $GITHUB_OUTPUT

  commit-and-push:
    needs: [set-date, audit]
    runs-on: ubuntu-latest
    env:
      DATESTAMP: ${{ needs.set-date.outputs.datestamp }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-reports
 
      - run: |
          echo "Contents of downloaded-reports:"
          ls -R downloaded-reports

      - name: Move reports into dated directory
        run: |
          pwd
          ls
          mkdir -p $REPORT_DIR

      - name: Configure Git for GitHub Actions
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Stage and commit before pull
        run: |
          git add docs/
          git commit -m "Stash local changes before pull" || echo "No changes"
          git pull origin main --rebase

      - name: Commit and Push Reports
        run: |
          git commit -m "Add reports for ${{ env.DATESTAMP }}" || echo "No changes"
          git push origin main

      - name: email reports
        run: |
          for dir in ${{ env.DATESTAMP }}/*; do
            site=$(basename "$dir")
            echo "Sending email for $site..."

            curl --request POST \
              --url https://api.sendgrid.com/v3/mail/send \
              --header "Authorization: Bearer $SENDGRID_API_KEY" \
              --header 'Content-Type: application/json' \
              --data '{
                "personalizations": [{
                  "to": [{ "email": "sean@proofstudio.co" }],
                  "subject": "Report for '"$site"'"
                }],
                "from": { "email": "noreply@proofstudio.co" },
                "content": [{
                  "type": "text/plain",
                  "value": "The report for '"$site"' is ready. View it here: https://sffitzpatrick.github.io/clearview-reports/manual-reports/'"${{ env.DATESTAMP }}"'/'"$site"'/index.html"
                }]
              }'
          done
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API }}
